// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  firstName    String   @db.VarChar(50)
  middleName   String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @db.VarChar(50)
  passwordHash String   @db.VarChar(32)
  registredAt  DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @db.Timestamp(0)
  intro        String   @db.TinyText
  profile      String   @db.Text
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt    DateTime @default(now()) @db.Timestamp(0)
  Post         Post[]
}

model Post {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  summary       String          @db.TinyText
  publishedAt   DateTime?       @db.Timestamp(0)
  content       String          @db.Text
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  UpdatedAt     DateTime        @default(now()) @db.Timestamp(0)
  User          User?           @relation(fields: [athurId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  athurId       Int?            @db.UnsignedInt
  Post_Commnet  Post_Commnet[]
  Post_Meta     Post_Meta[]
  Post_Tag      Post_Tag[]
  Post_Categoty Post_Categoty[]
}

model Post_Commnet {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  title     String   @db.VarChar(100)
  published Int      @db.TinyInt
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postId    Int?     @db.UnsignedInt
}

model Post_Meta {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  key       String   @db.VarChar(50)
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postId    Int?     @db.UnsignedInt
}

model Tag {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  title     String     @db.VarChar(75)
  metaTitle String     @db.VarChar(100)
  slug      String     @db.VarChar(100)
  content   String     @db.Text
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime   @default(now()) @db.Timestamp(0)
  Post_Tag  Post_Tag[]
}

model Post_Tag {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postId    Int?     @db.UnsignedInt
  Tag       Tag?     @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tagId     Int?     @db.UnsignedInt
}

model Category {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  content       String          @db.Text
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  UpdatedAt     DateTime        @default(now()) @db.Timestamp(0)
  Post_Categoty Post_Categoty[]
}

model Post_Categoty {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  UpdatedAt  DateTime  @default(now()) @db.Timestamp(0)
  Post       Post?     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postId     Int?      @db.UnsignedInt
  Category   Category? @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId Int?      @db.UnsignedInt
}
